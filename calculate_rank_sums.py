from scipy.stats import ranksums, wilcoxon
import pandas as pd
import os

baseline_results_array = [[0.5298507462686567, 0.6268656716417911, 0.47761194029850745, 0.6044776119402985, 0.5447761194029851, 0.5671641791044776, 0.5522388059701493, 0.5597014925373134, 0.582089552238806, 0.5223880597014925], [0.624515503875969, 0.6421875, 0.5838178294573644, 0.6387387387387388, 0.6210131332082551, 0.6354530631260191, 0.6487154150197628, 0.5995916515426497, 0.638507326007326, 0.6521739130434783], [0.6779162339910003, 0.7585227272727273, 0.6517543859649123, 0.7260550458715597, 0.6893577981651376, 0.7012807199723088, 0.6844362745098039, 0.6441707717569787, 0.7291666666666667, 0.6981132075471699], [0.5180131316014844, 0.5862154150197628, 0.4537619380386676, 0.5755184985954216, 0.5255122772392175, 0.5502314814814815, 0.5472972972972974, 0.5380660239555946, 0.5568154972832506, 0.5171171171171172], [0.6779162339910004, 0.7585227272727273, 0.6517543859649123, 0.7260550458715596, 0.6893577981651376, 0.7012807199723088, 0.6844362745098039, 0.6441707717569787, 0.7291666666666667, 0.6981132075471699]]

proposed_results_array = [[0.9253731343283582, 0.917910447761194, 0.917910447761194, 0.917910447761194, 0.917910447761194, 0.9029850746268657, 0.9253731343283582, 0.917910447761194, 0.917910447761194, 0.917910447761194], [0.8806980056980057, 0.881511946729338, 0.881511946729338, 0.8724770642201836, 0.881511946729338, 0.8478899082568807, 0.8893939393939394, 0.8655244029075805, 0.8724770642201836, 0.8655244029075805], [0.8806980056980057, 0.8468660968660968, 0.8468660968660968, 0.8614672364672364, 0.8468660968660968, 0.8376068376068375, 0.8660968660968661, 0.8760683760683761, 0.8614672364672364, 0.8760683760683761], [0.8806980056980057, 0.8626409467896747, 0.8626409467896747, 0.8668112406252824, 0.8626409467896747, 0.8425951025571519, 0.8770642201834863, 0.8706450197455025, 0.8668112406252824, 0.8706450197455025], [0.9066951566951567, 0.8924501424501424, 0.8842592592592593, 0.9002849002849003, 0.8945868945868946, 0.8871082621082621, 0.8988603988603989, 0.8956552706552706, 0.9024216524216524, 0.9013532763532763]]

# Todo: Choose the project (options: 'pytorch', 'tensorflow', 'keras', 'incubator-mxnet', 'caffe')
project = 'keras'
iterations = 10

out_csv_name = f'./results/{project}_rank-sums.csv'

acc_ranksums = ranksums(proposed_results_array[0], baseline_results_array[0])
prec_ranksums = ranksums(proposed_results_array[1], baseline_results_array[1])
recall_ranksums = ranksums(proposed_results_array[2], baseline_results_array[2])
f1_ranksums = ranksums(proposed_results_array[3], baseline_results_array[3])
auc_ranksums = ranksums(proposed_results_array[4], baseline_results_array[4])

print("=== CNN P-Value ===")
print(f"Accuracy:   {acc_ranksums[1]:.10f}")
print(f"Precision:  {prec_ranksums[1]:.10f}")
print(f"Recall:     {recall_ranksums[1]:.10f}")
print(f"F1-Score:   {f1_ranksums[1]:.10f}")
print(f"AUC:        {auc_ranksums[1]:.10f}")

print("\n=== CNN Statistic ===")
print(f"Accuracy:   {acc_ranksums[0]:.10f}")
print(f"Precision:  {prec_ranksums[0]:.10f}")
print(f"Recall:     {recall_ranksums[0]:.10f}")
print(f"F1-Score:   {f1_ranksums[0]:.10f}")
print(f"AUC:        {auc_ranksums[0]:.10f}")

header_needed = not os.path.isfile(out_csv_name)

df_log = pd.DataFrame(
    {
        'iterations': [iterations],
        'Accuracy': [acc_ranksums],
        'Precision': [prec_ranksums],
        'Recall': [recall_ranksums],
        'F1': [f1_ranksums],
        'AUC': [auc_ranksums],
        'raw_data_baseline': [baseline_results_array],
        'raw_data_proposed': [proposed_results_array],
    }
)

df_log.to_csv(out_csv_name, mode='a', header=header_needed, index=False)
print(f"\nResults have been saved to: {out_csv_name}")
